[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "what a great post!", "content_type": 7, "object_id": 1, "created_at": "2022-12-05T12:19:09.850Z", "modified_at": "2022-12-05T12:19:09.863Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "what can I say to me :)", "content_type": 4, "object_id": 1, "created_at": "2022-12-05T12:19:09.850Z", "modified_at": "2022-12-05T12:19:09.863Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "very useful. thanks!", "content_type": 7, "object_id": 3, "created_at": "2022-12-17T09:36:29.286Z", "modified_at": "2022-12-17T09:36:29.286Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "can I say something?!\r\nthis is so cool!", "content_type": 7, "object_id": 4, "created_at": "2022-12-17T09:52:27.267Z", "modified_at": "2022-12-17T09:52:27.267Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "let's have bunch of comments in this post", "content_type": 7, "object_id": 4, "created_at": "2022-12-17T09:52:53.094Z", "modified_at": "2022-12-17T09:52:53.094Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "are you here to add a comment too?", "content_type": 7, "object_id": 3, "created_at": "2022-12-17T12:33:28.049Z", "modified_at": "2022-12-17T12:33:28.049Z"}}, {"model": "blog.comment", "pk": 7, "fields": {"creator": 1, "content": "this is another test comment here", "content_type": 7, "object_id": 6, "created_at": "2023-01-07T09:56:45.796Z", "modified_at": "2023-01-07T09:56:45.796Z"}}, {"model": "blog.comment", "pk": 8, "fields": {"creator": 1, "content": "second comment!", "content_type": 7, "object_id": 6, "created_at": "2023-01-07T09:58:47.553Z", "modified_at": "2023-01-07T09:58:47.553Z"}}, {"model": "blog.comment", "pk": 9, "fields": {"creator": 1, "content": "lets have some fun :))", "content_type": 7, "object_id": 4, "created_at": "2023-01-07T11:49:23.198Z", "modified_at": "2023-01-07T11:49:23.198Z"}}, {"model": "blog.comment", "pk": 10, "fields": {"creator": 1, "content": "lets try to add a comment to ckeck logger baby!", "content_type": 7, "object_id": 1, "created_at": "2023-01-07T14:06:48.788Z", "modified_at": "2023-01-07T14:06:48.788Z"}}, {"model": "blog.comment", "pk": 11, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 1, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.comment", "pk": 12, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 2, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.comment", "pk": 13, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 3, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.comment", "pk": 14, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 4, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.comment", "pk": 15, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 5, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.comment", "pk": 16, "fields": {"creator": 1, "content": "Thankes for reading my post signed, KiaYavari", "content_type": 7, "object_id": 6, "created_at": "2023-02-20T06:54:49.343Z", "modified_at": "2023-02-20T06:54:49.343Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "sample"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "test"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2022-12-05T11:22:33.944Z", "modified_at": "2022-12-05T11:22:33.944Z", "published_at": "2022-12-05T11:21:05Z", "title": "What is Lorem Ipsum?", "slug": "what-is-lorem-ipsum", "summary": "Reference site about Lorem Ipsum, giving information on its origins, as well as a random Lipsum generator.", "content": "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 1, "created_at": "2022-12-12T07:00:08.949Z", "modified_at": "2022-12-12T07:00:08.949Z", "published_at": "2022-12-12T06:58:10Z", "title": "Hedonist Roots", "slug": "hedonist-roots", "summary": "Lorem ipsum began as scrambled, nonsensical Latin derived from Cicero's 1st-century BC text De Finibus Bonorum et Malorum.", "content": "Until recently, the prevailing view assumed lorem ipsum was born as a nonsense text. “It's not Latin, though it looks like it, and it actually says nothing,” Before & After magazine answered a curious reader, “Its ‘words’ loosely approximate the frequency with which letters occur in English, which is why at a glance it looks pretty real.”\r\n\r\nAs Cicero would put it, “Um, not so fast.”\r\n\r\nThe placeholder text, beginning with the line “Lorem ipsum dolor sit amet, consectetur adipiscing elit”, looks like Latin because in its youth, centuries ago, it was Latin.\r\n\r\nRichard McClintock, a Latin scholar from Hampden-Sydney College, is credited with discovering the source behind the ubiquitous filler text. In seeing a sample of lorem ipsum, his interest was piqued by consectetur—a genuine, albeit rare, Latin word. Consulting a Latin dictionary led McClintock to a passage from De Finibus Bonorum et Malorum (“On the Extremes of Good and Evil”), a first-century B.C. text from the Roman philosopher Cicero.\r\n\r\nIn particular, the garbled words of lorem ipsum bear an unmistakable resemblance to sections 1.10.32–33 of Cicero's work, with the most notable passage excerpted below:\r\n\r\n    “Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.”\r\n\r\nA 1914 English translation by Harris Rackham reads:\r\n\r\n    “Nor is there anyone who loves or pursues or desires to obtain pain of itself, because it is pain, but occasionally circumstances occur in which toil and pain can procure him some great pleasure.”\r\n\r\nMcClintock's eye for detail certainly helped narrow the whereabouts of lorem ipsum's origin, however, the “how and when” still remain something of a mystery, with competing theories and timelines.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 1, "created_at": "2022-12-16T09:55:56.740Z", "modified_at": "2022-12-16T09:55:56.740Z", "published_at": "2022-12-16T09:54:10Z", "title": "Writing and running tests", "slug": "writing-and-running-tests", "summary": "This document is split into two primary sections. First, we explain how to write tests with Django. Then, we explain how to run them.", "content": "Django’s unit tests use a Python standard library module: unittest. This module defines tests using a class-based approach.\r\n\r\nHere is an example which subclasses from django.test.TestCase, which is a subclass of unittest.TestCase that runs each test inside a transaction to provide isolation:\r\nfrom django.test import TestCase\r\nfrom myapp.models import Animal\r\n-------------------------------------------------------\r\nclass AnimalTestCase(TestCase):\r\n    def setUp(self):\r\n        Animal.objects.create(name=\"lion\", sound=\"roar\")\r\n        Animal.objects.create(name=\"cat\", sound=\"meow\")\r\n\r\n    def test_animals_can_speak(self):\r\n        \"\"\"Animals that can speak are correctly identified\"\"\"\r\n        lion = Animal.objects.get(name=\"lion\")\r\n        cat = Animal.objects.get(name=\"cat\")\r\n        self.assertEqual(lion.speak(), 'The lion says \"roar\"')\r\n        self.assertEqual(cat.speak(), 'The cat says \"meow\"')\r\n------------------------------------------------------------------------------------------\r\nWhen you run your tests, the default behavior of the test utility is to find all the test cases (that is, subclasses of unittest.TestCase) in any file whose name begins with test, automatically build a test suite out of those test cases, and run that suite.\r\n\r\nFor more details about unittest, see the Python documentation.\r\n\r\n\r\n\r\nWhere should the tests live?\r\n\r\nThe default startapp template creates a tests.py file in the new application. This might be fine if you only have a few tests, but as your test suite grows you’ll likely want to restructure it into a tests package so you can split your tests into different submodules such as test_models.py, test_views.py, test_forms.py, etc. Feel free to pick whatever organizational scheme you like.\r\n\r\nSee also Using the Django test runner to test reusable applications.\r\n\r\n\r\nWarning\r\n\r\nIf your tests rely on database access such as creating or querying models, be sure to create your test classes as subclasses of django.test.TestCase rather than unittest.TestCase.\r\n\r\nUsing unittest.TestCase avoids the cost of running each test in a transaction and flushing the database, but if your tests interact with the database their behavior will vary based on the order that the test runner executes them. This can lead to unit tests that pass when run in isolation but fail when run in a suite.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 4, "fields": {"author": 1, "created_at": "2022-12-16T09:58:52.726Z", "modified_at": "2022-12-16T09:58:52.726Z", "published_at": "2022-12-16T09:57:56Z", "title": "Performance and optimization", "slug": "performance-and-optimization", "summary": "This document provides an overview of techniques and tools that can help get your Django code running more efficiently - faster, and using fewer system resources.", "content": "Introduction¶\r\n\r\nGenerally one’s first concern is to write code that works, whose logic functions as required to produce the expected output. Sometimes, however, this will not be enough to make the code work as efficiently as one would like.\r\n\r\nIn this case, what’s needed is something - and in practice, often a collection of things - to improve the code’s performance without, or only minimally, affecting its behavior.\r\nGeneral approaches¶\r\nWhat are you optimizing for?¶\r\n\r\nIt’s important to have a clear idea what you mean by ‘performance’. There is not just one metric of it.\r\n\r\nImproved speed might be the most obvious aim for a program, but sometimes other performance improvements might be sought, such as lower memory consumption or fewer demands on the database or network.\r\n\r\nImprovements in one area will often bring about improved performance in another, but not always; sometimes one can even be at the expense of another. For example, an improvement in a program’s speed might cause it to use more memory. Even worse, it can be self-defeating - if the speed improvement is so memory-hungry that the system starts to run out of memory, you’ll have done more harm than good.\r\n\r\nThere are other trade-offs to bear in mind. Your own time is a valuable resource, more precious than CPU time. Some improvements might be too difficult to be worth implementing, or might affect the portability or maintainability of the code. Not all performance improvements are worth the effort.\r\n\r\nSo, you need to know what performance improvements you are aiming for, and you also need to know that you have a good reason for aiming in that direction - and for that you need:\r\nPerformance benchmarking¶\r\n\r\nIt’s no good just guessing or assuming where the inefficiencies lie in your code.\r\nDjango tools¶\r\n\r\ndjango-debug-toolbar is a very handy tool that provides insights into what your code is doing and how much time it spends doing it. In particular it can show you all the SQL queries your page is generating, and how long each one has taken.\r\n\r\nThird-party panels are also available for the toolbar, that can (for example) report on cache performance and template rendering times.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 5, "fields": {"author": 1, "created_at": "2022-12-16T10:04:25.504Z", "modified_at": "2022-12-16T10:04:25.504Z", "published_at": "2022-12-16T10:04:23Z", "title": "Django Rest Framework - Serializers", "slug": "django-rest-framework-serializers", "summary": "This tutorial will cover creating a simple pastebin code highlighting Web API. Along the way it will introduce the various components that make up REST framework, and give you a comprehensive understanding of how everything fits together.\r\n\r\nThe tutorial is fairly in-depth, so you should probably get a cookie and a cup of your favorite brew before getting started. If you just want a quick overview, you should head over to the quickstart documentation instead.", "content": "Setting up a new environment\r\n\r\nBefore we do anything else we'll create a new virtual environment, using venv. This will make sure our package configuration is kept nicely isolated from any other projects we're working on.\r\n-------------------------------------------\r\npython3 -m venv env\r\nsource env/bin/activate\r\n-------------------------------------------\r\nNow that we're inside a virtual environment, we can install our package requirements.\r\n----------------------------------------\r\npip install django\r\npip install djangorestframework\r\npip install pygments  # We'll be using this for the code highlighting\r\n-----------------------------------------\r\nNote: To exit the virtual environment at any time, just type deactivate. For more information see the venv documentation.\r\nGetting started\r\n\r\nOkay, we're ready to get coding. To get started, let's create a new project to work with.\r\n------------------------------------------\r\ncd ~\r\ndjango-admin startproject tutorial\r\ncd tutorial\r\n------------------------------------------\r\nOnce that's done we can create an app that we'll use to create a simple Web API.\r\n------------------------------------------\r\npython manage.py startapp snippets\r\n-------------------------------------------\r\nINSTALLED_APPS = [\r\n    ...\r\n    'rest_framework',\r\n    'snippets',\r\n]\r\n------------------------------------------\r\nOkay, we're ready to roll.\r\n-----------------------------------------\r\nCreating a model to work with\r\nFor the purposes of this tutorial we're going to start by creating a simple Snippet model that is used to store code snippets. Go ahead and edit the snippets/models.py file. Note: Good programming practices include comments. Although you will find them in our repository version of this tutorial code, we have omitted them here to focus on the code itself.", "tags": [1, 2]}}, {"model": "blog.post", "pk": 6, "fields": {"author": 1, "created_at": "2023-01-07T09:55:54.366Z", "modified_at": "2023-01-07T09:55:54.366Z", "published_at": "2023-01-07T09:54:55Z", "title": "Logging Intro", "slug": "logging-intro", "summary": "Logging Intro\r\nThere’s no getting past it: logging is a complicated topic. We won’t be able\r\nto cover everything there is to know about logging here, but we’ll give you\r\nthe fundamentals. Since we’re targeting the 12-Factor method of logging, it\r\nsimpliﬁes the process since we only need to log to stdout/the console.\r\nLogging consists of four parts:\r\nLoggers\r\nHandlers\r\nFilters\r\nFormatters", "content": "Loggers\r\nA logger is the entry point to the logging system. It’s like a named bucket\r\nthat messages get written to. In Python you get a logger by name. The ﬁrst\r\ntime you get a logger by name it’s created, and subsequent requests for a\r\nlogger with that name will give you the same one. A logger also has a log\r\nlevel, which describes the severity of messages it will handle.\r\nThe log levels to choose from are:\r\nDEBUG: Low level system information for debugging purposes\r\nINFO: General system information\r\nWARNING: Information describing a minor problem that has occurred.\r\nERROR: Information describing a major problem that has occurred.\r\nCRITICAL: Information describing a critical problem that has occurred.\r\nAfter you have a logger, you can write a Log Record to it. A log record\r\nconsists of a message, a log level, and optionally some metadata (like a\r\nstack trace). A logger will only handle messages at its log level or higher.\r\nFor example, a logger at log level WARNING will handle WARNING, ERROR and\r\nCRITICAL messages, but not DEBUG or INFO. Now let’s look at what handling\r\nmeans.\r\nHandlers\r\nAfter a logger receives a log record that exceeds its log level, it’s passed on\r\nto a Handler. The handler decides where the log record will go, such as to\r\nthe console, to a ﬁle, or somewhere else. The handler also has its own log\r\nlevel, so it will only handle log records which match or exceed that.", "tags": [1, 2]}}, {"model": "blango_auth.user", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$S1NuUW9ieVR0V1R6c3R1Mm4zb1M4MA$yL/UlJQ0UYkz8w19jCNf2w", "last_login": "2023-02-02T08:56:42.226Z", "is_superuser": true, "username": "kiarash-codio", "first_name": "Kia", "last_name": "Yavari", "email": "kiarash996@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2022-12-05T08:52:30Z", "groups": [], "user_permissions": []}}]